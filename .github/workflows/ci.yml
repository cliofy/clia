name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: "1.21"

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: make test

    - name: Run tests with race
      run: go test -race ./...

    - name: Generate test coverage
      run: make test-cover

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        fail_ci_if_error: true

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: v1.55.2
        args: --timeout=5m

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          # Windows ARM64 builds are not commonly needed
          - goos: windows
            goarch: arm64

    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "dev")
        COMMIT=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
        BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
        
        LDFLAGS="-X github.com/yourusername/clia/internal/version.Version=${VERSION} \
                 -X github.com/yourusername/clia/internal/version.GitCommit=${COMMIT} \
                 -X github.com/yourusername/clia/internal/version.BuildTime=${BUILD_TIME}"
        
        BINARY_NAME=clia-${GOOS}-${GOARCH}
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        mkdir -p bin
        go build -ldflags "${LDFLAGS}" -o "bin/${BINARY_NAME}" cmd/clia/main.go

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: clia-${{ matrix.goos }}-${{ matrix.goarch }}
        path: bin/clia-*

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './...'

    - name: Run Nancy vulnerability scanner
      uses: sonatypecommunity/nancy-github-action@main
      with:
        nancyCommand: sleuth